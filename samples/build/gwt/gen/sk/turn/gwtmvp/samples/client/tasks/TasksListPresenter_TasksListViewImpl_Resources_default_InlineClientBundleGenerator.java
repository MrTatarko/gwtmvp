package sk.turn.gwtmvp.samples.client.tasks;

import com.google.gwt.core.client.GWT;
import com.google.gwt.resources.client.ResourcePrototype;

public class TasksListPresenter_TasksListViewImpl_Resources_default_InlineClientBundleGenerator implements sk.turn.gwtmvp.samples.client.tasks.TasksListPresenter_TasksListViewImpl.Resources {
  private static TasksListPresenter_TasksListViewImpl_Resources_default_InlineClientBundleGenerator _instance0 = new TasksListPresenter_TasksListViewImpl_Resources_default_InlineClientBundleGenerator();
  private void htmlContentInitializer() {
    htmlContent = new com.google.gwt.resources.client.TextResource() {
      // file:/Users/Zajko/Documents/GitHub/gwtmvp/samples/src/main/java/sk/turn/gwtmvp/samples/client/tasks/TasksListView.html
      public String getText() {
        return "<div class=\"row\" data-mvp-dict=\"sk.turn.gwtmvp.samples.client.tasks.Dictionary\">\n  <style>.finished { text-decoration: line-through; color: #aaa; }</style>\n  <div class=\"col-md-offset-3 col-md-6\">\n    <h1>\n      <span style=\"float: right;\"><a href=\"javascript:void(0)\" class=\"btn btn-default\" data-mvp-id=\"addButton\"><span class=\"glyphicon glyphicon-plus\"></span></a></span>\n      <span data-mvp-id=\"username\"></span> {mvpDict.listTasks}\n      <small>(<a href=\"javascript:void(0)\" data-mvp-id=\"logout\">{mvpDict.listLogout}</a>)</small>\n    </h1>\n  </div>\n  <div class=\"col-md-offset-3 col-md-6 well\" data-mvp-id=\"tasksContainer\">\n  </div>\n  <!-- Source code -->\n  <div class=\"col-md-12\">\n    <h2><small><a href=\"https://github.com/turnsk/gwtmvp/blob/master/samples/src/sk/turn/gwtmvp/samples/client/tasks/TasksListPresenter.java\" target=\"_blank\">TasksListPresenter.java</a></small></h2>\n    <pre class=\"pre-scrollable\" style=\"max-height: 500px;\">\npublic class TasksListPresenter extends BasePresenter&lt;TasksListPresenter.TasksListView&gt; implements Dao.OnUserChangedHandler {\n\n  interface TasksListView extends HandlerView&lt;Element, TasksListPresenter&gt; {\n    @HtmlElement SpanElement getUsername();\n    @HtmlElement Element getTasksContainer();\n  }\n\n  private static final Dictionary dict = GWT.create(Dictionary.class);\n\n  public TasksListPresenter() {\n    super(\"^tasks/list$\", (TasksListView) GWT.create(TasksListView.class));\n  }\n\n  private TaskAdapter taskAdapter;\n\n  @Override\n  public void onViewLoaded() {\n    view.setHandler(this);\n    Dao.addOnUserChangedHandler(this);\n    onUserChanged(Dao.getUsername());\n    taskAdapter = new TaskAdapter(view.getTasksContainer());\n  }\n\n  @Override\n  public void onShow(String... groups) {\n    taskAdapter.setItems(Dao.getTasks());\n  }\n\n  @Override\n  public void onUserChanged(String username) {\n    view.getUsername().setInnerText(username != null ? username + (username.endsWith(\"s\") ? \"'\" : \"'s\") : \"\");\n  }\n\n  @HtmlHandler(\"addButton\")\n  void onAddTask(ClickEvent event) {\n    taskAdapter.addTask();\n  }\n\n  @HtmlHandler(\"logout\")\n  void onLogout(ClickEvent event) {\n    if (Window.confirm(dict.listLogoutConfirmation())) {\n      Dao.setTasks(null);\n      Dao.setUsername(null);\n    }\n  }\n\n}</pre>\n  </div>\n  <div class=\"col-md-12\">\n    <h2><small><a href=\"https://github.com/turnsk/gwtmvp/blob/master/samples/src/sk/turn/gwtmvp/samples/client/tasks/Task.java\" target=\"_blank\">Task.java</a></small></h2>\n    <pre>\npublic class Task extends JavaScriptObject {\n  protected Task() { }\n\n  public final native String getName() /*-{ return this.name; }-*/;\n  public final native void setName(String name) /*-{ this.name = name; }-*/;\n  public final native boolean isFinished() /*-{ return this.finished; }-*/;\n  public final native void setFinished(boolean finished) /*-{ this.finished = finished; }-*/;\n}</pre>\n  </div>\n  <div class=\"col-md-12\">\n    <h2><small><a href=\"https://github.com/turnsk/gwtmvp/blob/master/samples/src/sk/turn/gwtmvp/samples/client/tasks/TaskAdapter.java\" target=\"_blank\">TaskAdapter.java</a></small></h2>\n    <pre class=\"pre-scrollable\" style=\"max-height: 500px;\">\npublic class TaskAdapter extends ViewAdapter&lt;Task, TaskAdapter.TaskAdapterView&gt; {\n\n  interface TaskAdapterView extends HandlerView&lt;Element, TaskAdapter&gt; {\n    @HtmlElement DivElement getRoot();\n    @HtmlElement InputElement getCheck();\n    @HtmlElement DivElement getName();\n    @HtmlElement InputElement getNameInput();\n    @HtmlElement AnchorElement getEditButton();\n    @HtmlElement AnchorElement getRemoveButton();\n  }\n\n  public TaskAdapter(Element parentElement) {\n    super(parentElement);\n  }\n\n  public void addTask() {\n    JsArrayIterable&lt;Task&gt; tasks = Dao.getTasks();\n    tasks.push(Task.createObject().&lt;Task&gt;cast());\n    Dao.setTasks(tasks);\n    setItems(tasks);\n    startEdit(tasks.length() - 1);\n  }\n\n  @Override\n  protected TaskAdapterView createView() {\n    TaskAdapterView view = GWT.create(TaskAdapterView.class);\n    view.setHandler(this);\n    return view;\n  }\n\n  @Override\n  protected void setViewData(TaskAdapterView view, Task item) {\n    view.getCheck().setChecked(item.isFinished());\n    view.getName().setInnerText(item.getName());\n    if (item.isFinished()) {\n      view.getName().addClassName(\"finished\");\n      view.getEditButton().addClassName(\"hidden\");\n    } else {\n      view.getName().removeClassName(\"finished\");\n      view.getEditButton().removeClassName(\"hidden\");\n    }\n  }\n\n  @HtmlHandler(\"root\")\n  void onMouseOver(MouseOverEvent event) {\n    TaskAdapterView view = getItemView(getItemIndexFromEvent(event));\n    view.getEditButton().getStyle().setVisibility(Visibility.VISIBLE);\n    view.getRemoveButton().getStyle().setVisibility(Visibility.VISIBLE);\n  }\n\n  @HtmlHandler(\"root\")\n  void onMouseOut(MouseOutEvent event) {\n    TaskAdapterView view = getItemView(getItemIndexFromEvent(event));\n    view.getEditButton().getStyle().setVisibility(Visibility.HIDDEN);\n    view.getRemoveButton().getStyle().setVisibility(Visibility.HIDDEN);\n  }\n\n  @HtmlHandler(\"check\")\n  void onCheckChange(ChangeEvent event) {\n    int index = getItemIndexFromEvent(event);\n    getItem(index).setFinished(getItemView(index).getCheck().isChecked());\n    rearrangeTasks();\n  }\n\n  @HtmlHandler(\"nameInput\")\n  void onNameKeyUp(KeyUpEvent event) {\n    if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER || event.getNativeKeyCode() == KeyCodes.KEY_ESCAPE) {\n      finishEdit(event, event.getNativeKeyCode() == KeyCodes.KEY_ENTER);\n    }\n  }\n\n  @HtmlHandler(\"nameInput\")\n  void onNameBlur(BlurEvent event) {\n    finishEdit(event, true);\n  }\n\n  private void finishEdit(DomEvent&lt;?&gt; event, boolean save) {\n    int index = getItemIndexFromEvent(event);\n    Task task = getItem(index);\n    TaskAdapterView view = getItemView(index);\n    if (save) {\n      if (view.getNameInput().getValue().trim().length() == 0) {\n        removeTask(index);\n      } else {\n        task.setName(view.getNameInput().getValue());\n        view.getName().setInnerText(task.getName());\n        Dao.onTasksChanged();\n      }\n    }\n    view.getEditButton().removeClassName(\"hidden\");\n    view.getRemoveButton().removeClassName(\"hidden\");\n    view.getName().removeClassName(\"hidden\");\n    view.getNameInput().addClassName(\"hidden\");\n  }\n\n  @HtmlHandler(\"editButton\")\n  void onEditClick(ClickEvent event) {\n    startEdit(getItemIndexFromEvent(event));\n  }\n\n  private void startEdit(int index) {\n    Task task = getItem(index);\n    TaskAdapterView view = getItemView(index);\n    view.getEditButton().addClassName(\"hidden\");\n    view.getRemoveButton().addClassName(\"hidden\");\n    view.getName().addClassName(\"hidden\");\n    view.getNameInput().removeClassName(\"hidden\");\n    view.getNameInput().setValue(task.getName());\n    view.getNameInput().focus();\n  }\n\n  @HtmlHandler(\"removeButton\")\n  void onClick(ClickEvent event) {\n    removeTask(getItemIndexFromEvent(event));\n  }\n\n  private void removeTask(int index) {\n    JsArray&lt;Task&gt; tasks = Dao.getTasks();\n    JsArrayIterable&lt;Task&gt; newTasks = JavaScriptObject.createArray().cast();\n    // Copy the tasks but for the current\n    for (int i = 0; i &lt; tasks.length(); i++) {\n      if (i != index) {\n        newTasks.push(tasks.get(i));\n      }\n    }\n    Dao.setTasks(newTasks);\n    setItems(newTasks);\n  }\n\n  private void rearrangeTasks() {\n    JsArrayIterable&lt;Task&gt; newTasks = JavaScriptObject.createArray().cast();\n    JsArrayIterable&lt;Task&gt; oldTasks = Dao.getTasks();\n    for (Task task : oldTasks) {\n      if (!task.isFinished()) {\n        newTasks.push(task);\n      }\n    }\n    for (Task task : oldTasks) {\n      if (task.isFinished()) {\n        newTasks.push(task);\n      }\n    }\n    Dao.setTasks(newTasks);\n    setItems(newTasks);\n  }\n\n}</pre>\n  </div>\n  <div class=\"col-md-12\">\n    <h2><small><a href=\"https://github.com/turnsk/gwtmvp/blob/master/samples/src/sk/turn/gwtmvp/samples/client/tasks/Dao.java\" target=\"_blank\">Dao.java</a></small></h2>\n    <pre class=\"pre-scrollable\" style=\"max-height: 500px;\">\npublic class Dao {\n\n  interface OnUserChangedHandler {\n    void onUserChanged(String username);\n  }\n\n  interface OnTasksLoadedCallback {\n    void onTasksLoaded(JsArray&lt;Task&gt; tasks);\n  }\n\n  private static final Storage localStorage = Storage.getLocalStorageIfSupported();\n  private static String username = (localStorage != null ? localStorage.getItem(\"username\") : null);\n  private static final List&lt;OnUserChangedHandler&gt; onUserChangedHandlers = new ArrayList&lt;&gt;();\n  private static JsArrayIterable&lt;Task&gt; tasks;\n\n  public static String getUsername() {\n    return username;\n  }\n\n  public static void setUsername(String username) {\n    Dao.username = username;\n    if (localStorage != null) {\n      if (username == null) {\n        localStorage.removeItem(\"username\");\n        localStorage.removeItem(\"tasks\");\n      } else {\n        localStorage.setItem(\"username\", username);\n      }\n    }\n    for (OnUserChangedHandler handler : onUserChangedHandlers) {\n      handler.onUserChanged(username);\n    }\n  }\n\n  public static void addOnUserChangedHandler(OnUserChangedHandler handler) {\n    onUserChangedHandlers.add(handler);\n  }\n\n  public static JsArrayIterable&lt;Task&gt; getTasks() {\n    if (tasks == null &amp;&amp; localStorage != null) {\n      String tasksJson = localStorage.getItem(\"tasks\");\n      if (tasksJson != null) {\n        tasks = JsonUtils.&lt;JsArrayIterable&lt;Task&gt;&gt;safeEval(tasksJson);\n      }\n    }\n    return tasks;\n  }\n\n  public static void setTasks(JsArray&lt;Task&gt; tasks) {\n    Dao.tasks = (tasks != null ? tasks.&lt;JsArrayIterable&lt;Task&gt;&gt;cast() : null);\n    onTasksChanged();\n  }\n\n  public static void onTasksChanged() {\n    if (localStorage != null) {\n      if (tasks != null) {\n        localStorage.setItem(\"tasks\", JsonUtils.stringify(tasks));\n      } else {\n        localStorage.removeItem(\"tasks\");\n      }\n    }\n  }\n\n}</pre>\n  </div>\n</div>";
      }
      public String getName() {
        return "htmlContent";
      }
    }
    ;
  }
  private static class htmlContentInitializer {
    static {
      _instance0.htmlContentInitializer();
    }
    static com.google.gwt.resources.client.TextResource get() {
      return htmlContent;
    }
  }
  public com.google.gwt.resources.client.TextResource htmlContent() {
    return htmlContentInitializer.get();
  }
  private static java.util.HashMap<java.lang.String, com.google.gwt.resources.client.ResourcePrototype> resourceMap;
  private static com.google.gwt.resources.client.TextResource htmlContent;
  
  public ResourcePrototype[] getResources() {
    return new ResourcePrototype[] {
      htmlContent(), 
    };
  }
  public ResourcePrototype getResource(String name) {
    if (GWT.isScript()) {
      return getResourceNative(name);
    } else {
      if (resourceMap == null) {
        resourceMap = new java.util.HashMap<java.lang.String, com.google.gwt.resources.client.ResourcePrototype>();
        resourceMap.put("htmlContent", htmlContent());
      }
      return resourceMap.get(name);
    }
  }
  private native ResourcePrototype getResourceNative(String name) /*-{
    switch (name) {
      case 'htmlContent': return this.@sk.turn.gwtmvp.samples.client.tasks.TasksListPresenter_TasksListViewImpl.Resources::htmlContent()();
    }
    return null;
  }-*/;
}
